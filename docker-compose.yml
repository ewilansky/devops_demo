version: '3.7'

services:
  jenkins:
    # image: ahl/jenkins:latest
    # alternatively, I've switched to the blueocean enabled version of Jenkins
    # this doesn't require a custom image, it's smaller and contains the 
    # embedded docker client
    # image: jenkinsci/blueocean:latest
    build: ./build_def_jenkins
    image: ahl/jenkins:v1
    user: root
    networks:
        tc-net:
          aliases: 
            - "orchestrate"
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - ./jenkins_home:/var/jenkins_home
      # run Docker from the host system when the container calls it. Note, Docker is stll 
      # required in the jenkins container
      - /var/run/docker.sock:/var/run/docker.sock
      # adding a bind for the Gradle build so the Gradle container can run the code. 
      # the Gradle container isn't specified here because the Jenkins agent bootstraps the build
      - ./spring-boot-demo:/home/project
      # for kubernetes yamls
      - ./kube_yamls:/kube/deploy

    container_name: jenkins

  db: 
    image: postgres
    networks:
      tc-net:
        aliases: 
          - "db"
    ports:
      - "5432:5432"
    restart: always
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres-passwd
      POSTGRES_USER_FILE: /run/secrets/postgres-user
      PGDATA: /var/lib/postgresql/data/pgdata
    secrets:
      - postgres-user
      - postgres-passwd
    volumes:
      # contains the database(s) on the host
      - ./postgres_home/data:/var/lib/postgresql/data/pgdata
    container_name: postgres
  
  sonarqube: 
    build: ./build_def_sonar
    image: ahl.sonar:v1
    networks:
      tc-net:
        aliases: 
          - "analyze"
    ports: 
      - "9000:9000"
      - "9092:9092"
    secrets:
      # bind mounting secrets to a unique target because sonarqube already 
      # has a /run folder that appears to be preventing 
      # the projection of /run/secrets into the container
       - source: sonarqube-passwd
         target: /usr/local/secrets/sonarqube-passwd
       - source: sonarqube-user
         target: /usr/local/secrets/sonarqube-user
    volumes:
      - ./sonar_home/conf:/opt/sonarqube/conf
      - ./sonar_home/data:/opt/sonarqube/data
      - ./sonar_home/extensions:/opt/sonarqube/extensions
      - ./sonar_home/bundled-plugins:/opt/sonarqube/lib/bundled-plugins
    container_name: sonarqube

  nexus:
    image: sonatype/nexus3:latest
    networks:
      tc-net:
        aliases:
          - "package-repo"
    ports:
      - "8081:8081"
    volumes:
      - ./nexus_home/nexus_data:/nexus-data
    container_name: nexus

  git:
    image: gogs/gogs
    networks:
      tc-net:
        aliases:
          - "git-repo"
    ports:
      - "10022:22"
      - "10080:3000"
    volumes:
      - ./git_home/var/gogs:/data
    container_name: gogs

  nginx:
    build: ./build_def_nginx
    image: ahl.nginx:v1
    networks:
      tc-net:
        aliases: 
          - "reverse-proxy"
    ports:
       - "18445:18445"
       - "18446:18446"
       - "18447:18447"
    
    # to debug nginx:
    command: [nginx-debug, '-g', 'daemon off;']
    
    container_name: nginx

    # to resolve for automating setup: 
    # had to manually create gogs db in postgres
    # had to manually run install at http://localhost:10080 and select postgres w/gogs db
    # and postgres admin logon - see creds above in postgres section. Postgres at db:5432
    # had to create account in gogs when browsing to http://localhost:10080. First time, 
    # gogs went to http://localhost:3000, which failed

networks:
  tc-net:

secrets:
  postgres-user:
    file: ./secrets/postgres_usr.txt
  postgres-passwd:
    file: ./secrets/postgres_password.txt
  sonarqube-user:
    file: ./secrets/sonarqube_usr.txt
  sonarqube-passwd:
    file: ./secrets/sonarqube_password.txt